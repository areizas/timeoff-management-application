pipeline {
    agent any

    tools {
        nodejs "Node 10.19.0"
    }

    environment {
        nodeVersion = "Node 10.19.0"
        serviceName = "timeoff"
    }

    stages {

        stage ('Unit Test') {
            steps {
                nodejs(nodeJSInstallationName: "${nodeVersion}") {
                    sh 'npm install'
                    sh 'rm -rf *.sqlite'
                    sh 'USE_CHROME=1 npm run ci-test'
                }
            }
        }

        stage ('Create Docker Image') {
            steps {
                sh 'docker build . -t timeoff:latest'
            }
        }

        stage ('Create ACR on Azure') {
            steps {
                dir("devops/infrastructure/azure-container-registry"){
                    withCredentials([string(credentialsId: 'az-storage-account-key', variable: 'ACCESS_KEY')]) { //set SECRET with the credential content
                        sh """sed -i "s|#{ACCESS_KEY}#|${ACCESS_KEY}|g" 00-backend.tf"""
                    }
                    withCredentials([azureServicePrincipal('az-areizas')]){
                        sh """sed -i "s|#{AZURE_SUBSCRIPTION_ID}#|${AZURE_SUBSCRIPTION_ID}|g" 01-dev.auto.tfvars"""
                        sh """sed -i "s|#{AZURE_CLIENT_ID}#|${AZURE_CLIENT_ID}|g" 01-dev.auto.tfvars"""
                        sh """sed -i "s|#{AZURE_CLIENT_SECRET}#|${AZURE_CLIENT_SECRET}|g" 01-dev.auto.tfvars"""
                        sh """sed -i "s|#{AZURE_TENANT_ID}#|${AZURE_TENANT_ID}|g" 01-dev.auto.tfvars"""
                    }
                    sh "terraform init"
                    sh "terraform apply -auto-approve"
                }
            }
        }

        stage ('Push Docker Images to Azure ACR') {
            steps {
                withCredentials([azureServicePrincipal('az-areizas')]){
                    sh 'az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET -t $AZURE_TENANT_ID'
                    sh 'az acr login --name acrareizas'
                    sh 'docker tag timeoff:latest acrareizas.azurecr.io/timeoff:latest'
                    sh 'docker push acrareizas.azurecr.io/timeoff:latest'
                } 

            }
        }

        stage ('Create AKS Infrastructure in Azure') {
            steps {
                dir('devops/infrastructure/azure-kubernetes-service'){
                    withCredentials([string(credentialsId: 'az-storage-account-key', variable: 'ACCESS_KEY')]) { //set SECRET with the credential content
                        sh """sed -i "s|#{ACCESS_KEY}#|${ACCESS_KEY}|g" 00-backend.tf"""
                    }
                    withCredentials([azureServicePrincipal('az-areizas')]){
                        sh """sed -i "s|#{AZURE_SUBSCRIPTION_ID}#|${AZURE_SUBSCRIPTION_ID}|g" 01-dev.auto.tfvars"""
                        sh """sed -i "s|#{AZURE_CLIENT_ID}#|${AZURE_CLIENT_ID}|g" 01-dev.auto.tfvars"""
                        sh """sed -i "s|#{AZURE_CLIENT_SECRET}#|${AZURE_CLIENT_SECRET}|g" 01-dev.auto.tfvars"""
                        sh """sed -i "s|#{AZURE_TENANT_ID}#|${AZURE_TENANT_ID}|g" 01-dev.auto.tfvars"""
                    }
                    sh 'terraform init'
                    sh 'terraform apply -auto-approve'
                }
            }
        }

        stage ('Deploy Container') {
            steps {
                dir('devops/deployment'){
                    sh 'az aks get-credentials --resource-group timeoff-management --name timeoff-cluster --overwrite-existing'
                    sh 'kubectl apply -f timeoff-deployment.yaml'
                    sh 'kubectl set image deployment/timeoff timeoff=acrareizas.azurecr.io/timeoff:latest'
                    sh "bash ./createDNS.sh ${serviceName}"
                }

            }
        }

        stage ('Run Acceptance tests') {
            steps {
                nodejs(nodeJSInstallationName: "${nodeVersion}") {
                    sh 'npm install'
                    sh "USE_CHROME=1 URL=http://${serviceName}.eastus.cloudapp.azure.com npm test"
                }
            }
        }

        stage ('Promote Image') {
            steps {
                withCredentials([azureServicePrincipal('az-areizas')]){
                    sh 'az acr login --name acrareizas'
                    sh 'docker tag acrareizas.azurecr.io/timeoff:latest acrareizas.azurecr.io/timeoff:candidate'
                    sh 'docker push acrareizas.azurecr.io/timeoff:candidate'
                } 

            }
        }

        stage('Delete Infrastructure?') {
            steps {
                script{
                    timeout(120) {
                        input message:'Approve destroy infrastructure?', submitter: 'it-ops'
                        infrastrutureDirectories = ['devops/infrastructure/azure-container-registry','devops/infrastructure/azure-kubernetes-service']
                        infrastrutureDirectories.each{
                            dir("${it}"){
                                withCredentials([string(credentialsId: 'az-storage-account-key', variable: 'ACCESS_KEY')]) { //set SECRET with the credential content
                                    sh """sed -i "s|#{ACCESS_KEY}#|${ACCESS_KEY}|g" 00-backend.tf"""
                                }
                                withCredentials([azureServicePrincipal('az-areizas')]){
                                    sh """sed -i "s|#{AZURE_SUBSCRIPTION_ID}#|${AZURE_SUBSCRIPTION_ID}|g" 01-dev.auto.tfvars"""
                                    sh """sed -i "s|#{AZURE_CLIENT_ID}#|${AZURE_CLIENT_ID}|g" 01-dev.auto.tfvars"""
                                    sh """sed -i "s|#{AZURE_CLIENT_SECRET}#|${AZURE_CLIENT_SECRET}|g" 01-dev.auto.tfvars"""
                                    sh """sed -i "s|#{AZURE_TENANT_ID}#|${AZURE_TENANT_ID}|g" 01-dev.auto.tfvars"""
                                }
                                sh 'terraform init'
                                sh 'terraform destroy -auto-approve'
                            }
                        }
                    }
                    echo "Destroyed!"
                }
            }
        }

    }
}



